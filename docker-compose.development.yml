# https://docs.docker.com/compose/compose-file/compose-versioning
version: "3.8"

services:
  # NGINX
  nginx:
    container_name: hm_nginx
    build:
      context: .
      dockerfile: Dockerfile.nginx.development
    volumes:
      - ".:/app"
      - "/app/node_modules"
    environment:
      - NODE_ENV=development
    restart: on-failure
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - server

  # Server
  server:
    container_name: hm_server
    build:
      context: .
      dockerfile: Dockerfile.server.development
    environment:
      - NODE_ENV=development
    volumes:
      - ".:/app"
      - "/app/node_modules"
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
    restart: on-failure
    ports:
      - "5000:5000"
    depends_on:
      - fluent-bit
      - redis
      - postgres

  # Redis
  redis:
    container_name: hm_redis
    image: redis:6.0.9-alpine
    volumes:
      - redis_data:/data
    restart: on-failure
    ports:
      - "6379:6379"

  # PostgreSQL
  postgres:
    container_name: hm_postgres
    image: postgres:13.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    env_file:
      - ./docker/postgres/.env.development.local
    restart: on-failure
    ports:
      - "5432:5432"

  # Fluent Bit
  fluent-bit:
    container_name: hm_fluent_bit
    image: fluent/fluent-bit:1.6.4
    volumes:
      - ./docker/fluent-bit/conf:/fluent-bit/etc
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    restart: on-failure
    ports:
      - "24224:24224"
      - "5140:5140/udp"
      - "2020:2020"
    depends_on:
      - elasticsearch

  # OpenTelemetry Collector
  opentelemetry-collector:
    container_name: hm_opentelemetry_collector
    image: otel/opentelemetry-collector:latest
    command: [
      "--config=/conf/otel-collector.config.yaml",
      "--log-level=DEBUG"
    ]
    volumes:
      - ./docker/opentelemetry-collector/otel-collector.config.yaml:/conf/otel-collector.config.yaml
    restart: on-failure
    ports:
      - "9464:9464"
      - "55680:55680"
      - "55681:55681"
    depends_on:
      - jaeger-collector

  # Jaeger
  jaeger-collector:
    container_name: hm_jaeger_collector
    image: jaegertracing/jaeger-opentelemetry-collector:latest
    command: [
      "--es.num-shards=1",
      "--es.num-replicas=0",
      "--es.server-urls=http://elasticsearch:9200"
    ]
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - LOG_LEVEL=debug
    restart: on-failure
    ports:
      - "14250"
      - "14268"
    depends_on:
      - elasticsearch

  jaeger-agent:
    container_name: hm_jaeger_agent
    image: jaegertracing/jaeger-opentelemetry-agent:latest
    command: [
      "--config=./docker/jaeger-agent/otel-agent.config.yml",
      "--reporter.grpc.host-port=jaeger-collector:14250"
    ]
    volumes:
      - ./:/config/:ro
    ports:
      - "6831/udp"
      - "6832/udp"
      - "5778"
    restart: on-failure
    depends_on:
      - jaeger-collector

  jaeger-query:
    container_name: hm_jaeger_query
    image: jaegertracing/jaeger-query:latest
    command: [
      "--es.num-shards=1",
      "--es.num-replicas=0",
      "--es.server-urls=http://elasticsearch:9200"
    ]
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - LOG_LEVEL=debug
    restart: on-failure
    ports:
      - "16686:16686"
      - "16687"
    depends_on:
      - elasticsearch

  # Elasticsearch
  elasticsearch:
    container_name: hm_elasticsearch
    # https://www.docker.elastic.co/r/elasticsearch/elasticsearch-oss
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.9.3
    environment:
      - discovery.type=single-node
    restart: on-failure
    ports:
      - "9200/tcp"

  # Kibana
  kibana:
    container_name: hm_kibana
    # https://www.docker.elastic.co/r/kibana/kibana-oss
    image: docker.elastic.co/kibana/kibana-oss:7.10.0
    restart: on-failure
    ports:
      - 5601:5601

  # Prometheus
  prometheus:
    container_name: hm_prometheus
    image: prom/prometheus:v2.22.1
    volumes:
      - ./docker/prometheus/prometheus.development.yaml:/etc/prometheus/prometheus.yml
    restart: on-failure
    ports:
      - "9090:9090"

  # Grafana
  grafana:
    container_name: hm_grafana
    image: grafana/grafana:7.3.1
    environment:
      # https://grafana.com/grafana/plugins
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
    restart: on-failure
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

# For persistence between restarts
volumes:
  redis_data:
  postgres_data:
